TODO short term
CLEANUP!!

Maybe log script errors at server, so we see when applications are failing.

Double select action?

replace scripts in onclick tags by calls to functions (selectHour, etc.)

Fix/clip incorrect selectionIx

Turn on auto refresh (maybe 10s) before putting online
 
the call to the next load is outside the if now, are the object and index always defined okay?

double load (before and after edit op) on select day is not okay. how do we combine a load with a server edit op?

scrolled lists don't go back up when selecting different hours (maybe a select function for reservationIx can handle this)

implement the slowest Generics functions with Template Haskell
or maybe with the new generics lib?
http://www.haskell.org/ghc/docs/latest/html/users_guide/generic-programming.html

maybe prevent text selection on the lists with edit actions

find some way to have autorefresh always on when running on server

Find a way to do the list with varying length in the hour view
Figure out which object lives where Right now reservations gets just the reservation and not the object with the entry
for hour we also have the entry (and day as well, but it has no entry yet)
Either have the object with the entry and the list (or reservation for reservation) at each level or just the list/reservation 

24 hr. not in client view. also it should be 0 instead of 24

Move selectedIx to lower views? Take care that it is still accessible from restaurant (for the 'between' label)

Maybe make the whole thing dynamic, also for day selection.

TODO: why no $('#ViewId []') queries?
TODO: get rid of viewRef here: getElementByIdRef (widgetGetViewRef)      id's are fine. viewRef is just for internal stuff
TODO: report type problem in WebViewPrim.viewEdit
BUG: empty script in mkWebView creates problem
BUG: pressing button while focus on text field has weird behavior
BUG?: Firefox on Oblomov mentions Empty string passed to getElementById()
DESIGN: changes in view lead to re-evaluating view script
  may be problematic if there is init code in there.
  for now time is set to nothing, because it cause re-evaluation as somehow it switched between Nothing and Just (18,30)
  will explicit view id references in the script cause problems?

Find a good way to put script edit actions in mkEditAction and mkEditActionAttr. Putting the edit actions in present seems wrong, and also
makes it impossible to refer to viewId's. It would be nice to do a similar thing that we do for widgets now. Maybe use empty edit action and specify onEditAction or something?

Referencing view placeholders is not very nice now. Maybe put these in the monad? (e.g.  r <- mkRef and use r in the presentation to mark part of it)

Phantom type in Web View, hide constructor
mkWebView :: (ViewId viewtype -> WebViewM viewtype) -> â€¦
Only want this in the WebView instantiation, not internally

Special init for each webview, not with maybes and initials

Longer term

String max size? make sure that scripts cannot go wrong

Generics.replace what is this, also for label or other widgets?
present LabelView not implemented

edit on LabelView? (will need to implement Generics.replace) 

BUG sometimes the new node list is not empty after processing updates. Unable to reproduce reliably. Might depend on the state of Firefox as well.
The most likely revision in which it occurs is revision 2635 for Reservations/Main.hs and 2632 for the rest. 


Are responses from server guaranteed in correct order? Otherwise, make a queue.

Can the server process updates multithreaded? If so, need to block. 

find a way to set the title (and maybe auto refresh timer) in the WebView specification.

multiple browser windows/tabs are fatal

Int ids are way too dangerous! encode them in something that cannot accidentally be used
BUG: without firebug, console is not declared, and webviews fails completely

Design
Explain why we need script nodes. Why can't we just set onClick attrs etc.?
What about withEditAction, setting edit actions for elements in the dom. Do we want to use script nodes for those as well?

Script nodes must only be created if they did not exist. Otherwise event handlers will be cleared if widget is refreshed and parent not.
UNCLEAR: What happens if a script id is reused? Then the new view may have handlers it shouldn't have? 

referencing webviews is not possible, since the viewId's are not in the tree. add them with an extra span?
(still need the other id's for the tree surgery, since viewId's will not be unique as they are in the root and on the new list)

Figure out whether and how to parameterize withEditAction and withEditActionAttr
What about button edit actions?

Accessing text from a textView in an edit action is tricky. We don't want to take it directly from the (Widget..(TextView ..str)) but look it up by its id.
How can this confusion be removed?

Need extra state (think of good name) on client side
JSVar seems awkward. (and if we keep it, need to figure out if it really needs to be a widget.)
It might be okay to have something like jsvar to create and access identifiable client-side variables though
(can also be done with string and parent view id suffix, but this is a bit less safe)
Block of code associated with WebView (for now just suffix, but we need to garbage collect them as well)
Default behavior for selection and focus. Webview can have focus and selection

Group controls in form like fashion, so they only cause edit on some submit/commit edit op? (like "make reservation")
Allow specification of client-side edit op.


 form <- mkForm
 
 b1 <- mkButton
 onClick b1 <- call "disenable"
 
 t <- mkTextField
 onChange t <- call "disenable"
 commitButton <- mkButton
 onClick commitButton $ commit form
 
 
Naming
Text/TextView
RadioView 

in Main, we get (Widget Text), (Widget RadioView) etc. these will get type synonyms Text... etc.
The synonyms should be consistent with the naming in Types
 


Possible bugs

 Drag & drop code may interfere with hList and vList spacings


Escape everything
  Button text, ...
Scripting:
-  Scripts are gathered and all executed after the new viewtree has been built. This is necessary, since scripts may refer to viewId's which will still be in the old root view.
   
- Handle escaping, emitting the string </WebViewsJavaScript> will crash 
- Maybe we can create a special WebNode for scripts? Might make it easier to present them automatically and won't require the extraction.
   It would require changing Incrementality though.
   
   
   